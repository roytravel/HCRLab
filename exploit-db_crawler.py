# -*- coding:utf-8 -*-
# Who : Roytravel
# When : 2020.07.23
# Why : To update exploit-db information to database
# How : Crawl exploit-db based on parsing CVE info
# What : Tool for parsing and crawling
# Where : Hacking and Countermeasure Response Lab

import os
import re
import json
from selenium import webdriver
import time

def load_cve_json(cve_json_path):

    fullpath = list()
    for (root, dirs, files) in os.walk(cve_json_path):
        root = root +'/'
        for file in files:
            fullpath.append(root + file)

    return fullpath


# 기존 SQL 데이터에 CVE의 존재 여부 확인을 위해 SQL 데이터 로딩
def read_sql(path_sql):
    with open(path_sql, mode='rb') as f:
        data_sql = f.read()

    return data_sql

# 기존 SQL 파일 데이터에 Add를 위한 데이터 로딩
def update_sql(path_sql, bquery):
    with open(path_sql, 'a+', -1, 'utf-8') as f:
        try:
            f.write(bquery)
            f.write('\n')
        except Exception as err:
            print (err)


if __name__ == '__main__':

    cve_json_path = "CVE/"
    fullpath = load_cve_json(cve_json_path)
    url = list()

    for json_index in range(len(fullpath)):
        with open(fullpath[json_index], mode = 'rt', encoding='ISO-8859-1') as f:
            data = json.load(f)

            for cve_idx in range(len(data['CVE_Items'])):
                refer_data = data["CVE_Items"][cve_idx]['cve']['references']["reference_data"]
                for refer_idx in range(len(refer_data)):
                    if (refer_data[refer_idx]['refsource'] == "EXPLOIT-DB"):
                        name = refer_data[refer_idx]['name']
                        url.append(refer_data[refer_idx]['url'])
        if json_index == 0:
            break

    driver_path = "chromedriver.exe"
    driver = webdriver.Chrome(driver_path)
    driver.implicitly_wait(1)

    data_sql = read_sql("Vulnerability_DB_CVE_EDB_mapping.sql")
    deprecated_list = list()

    for url_idx in range(len(url)):
        driver.get(url[url_idx])
        
        try:
            EDBID = driver.find_element_by_xpath('/html/body/div/div[2]/div[2]/div/div/div[1]/div/div[2]/div[1]/div[1]/div/div[1]/div/div/div/div[1]/h6')
        
        except Exception as err:

            # 별도 404 페이지 리스트 저장 기능 필요
            print ("({}/{}) {} 404 not found".format(url_idx + 1, len(url), url[url_idx]))

        try:
            HALF_CVE = driver.find_element_by_xpath('/html/body/div/div[2]/div[2]/div/div/div[1]/div/div[2]/div[1]/div[1]/div/div[1]/div/div/div/div[2]/h6/a')
            CVE = "CVE-" + HALF_CVE.text

        except Exception as err:
            print ("({}/{}) {} is deprecated".format(url_idx + 1, len(url), url[url_idx]))
            deprecated_list.append(url[url_idx])
            continue

        Author = driver.find_element_by_xpath('/html/body/div/div[2]/div[2]/div/div/div[1]/div/div[2]/div[1]/div[2]/div/div[1]/div/div/div/div[1]/h6/a')
        Type = driver.find_element_by_xpath('/html/body/div/div[2]/div[2]/div/div/div[1]/div/div[2]/div[1]/div[2]/div/div[1]/div/div/div/div[2]/h6/a')
        Platform = driver.find_element_by_xpath('/html/body/div/div[2]/div[2]/div/div/div[1]/div/div[2]/div[1]/div[3]/div/div[1]/div/div/div/div[1]/h6/a')
        Date = driver.find_element_by_xpath('/html/body/div/div[2]/div[2]/div/div/div[1]/div/div[2]/div[1]/div[3]/div/div[1]/div/div/div/div[2]/h6')
        HALF_Verified = driver.find_element_by_xpath('/html/body/div/div[2]/div[2]/div/div/div[1]/div/div[2]/div[1]/div[1]/div/div[2]/div/i')
        Verified = HALF_Verified.get_attribute('class')

        if Verified == str("mdi mdi-24px mdi-close"):
            Verified = "Waiting verification"
        
        elif Verified == str("mdi mdi-24px mdi-check"):
            Verified = "Verified"

        query = "INSERT INTO Vulnerability_DB.CVE_EDB_mapping (ID, EDBID, Author, Published, Type, Platform, Verified) VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}');".format(CVE, EDBID.text, Author.text, Date.text, Type.text, Platform.text, Verified)
        bquery = bytes(query, 'utf-8')

        if bquery[:127] in data_sql:
            print ("({}/{}) {} is exist in database".format(url_idx + 1, len(url), CVE))

        else:
            update_sql("Vulnerability_DB_CVE_EDB_mapping.sql", bquery.decode('utf-8'))
            print ("({}/{}) {} is updated".format(url_idx + 1, len(url), CVE))
            


    print (deprecated_list)
    print (len(deprecated_list))
    
    with open("EDB_deprecated.txt", 'w+') as f:
        for i in range(len(deprecated_list)):
            f.write(deprecated_list[i])
            f.write('\n')

